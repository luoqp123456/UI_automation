{"name": "test_import", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: 此批次名称已存在！\nMessage: unexpected alert open: {Alert text : 此批次名称已存在！}\n  (Session info: chrome=85.0.4183.121)", "trace": "self = <UI_automation.test_case.test_import.Test_import object at 0x03BF52B0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ae35c6376765e4cc09d00a8bf1887b50\")>\nlog_up = <commen.log.Log object at 0x03BF5270>\n\n    def test_import(self, browser, log_up):\n        try:\n            log_up.info('测试用例：签约合同')\n            loginsuccess(browser)\n            bi = batch_import_page(browser)\n            bi.click_import()\n        except Exception as e:\n            print(\"Exception happening :\" + str(e))\n            raise\n        with allure.step('截图验证'):\n>           browser.save_screenshot(\"./result/c.png\")\n\ntest_case\\test_import.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1055: in save_screenshot\n    return self.get_screenshot_as_file(filename)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1032: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1064: in get_screenshot_as_png\n    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1074: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x037DCD50>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"此批次名称已存在！\"},\"error\":\"unexpected alert open\",\"message\":\"unexpected ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777074B4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77707484+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n>           raise exception_class(message, screen, stacktrace, alert_text)\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: 此批次名称已存在！\nE           Message: unexpected alert open: {Alert text : 此批次名称已存在！}\nE             (Session info: chrome=85.0.4183.121)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:241: UnexpectedAlertPresentException"}, "steps": [{"name": "截图验证", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: 此批次名称已存在！\nMessage: unexpected alert open: {Alert text : 此批次名称已存在！}\n  (Session info: chrome=85.0.4183.121)\n\n", "trace": "  File \"C:\\Users\\Administrator\\PycharmProjects\\UI_automation\\test_case\\test_import.py\", line 19, in test_import\n    browser.save_screenshot(\"./result/c.png\")\n  File \"C:\\Users\\Administrator\\PycharmProjects\\UI_automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1055, in save_screenshot\n    return self.get_screenshot_as_file(filename)\n  File \"C:\\Users\\Administrator\\PycharmProjects\\UI_automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1032, in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n  File \"C:\\Users\\Administrator\\PycharmProjects\\UI_automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1064, in get_screenshot_as_png\n    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\n  File \"C:\\Users\\Administrator\\PycharmProjects\\UI_automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1074, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\n  File \"C:\\Users\\Administrator\\PycharmProjects\\UI_automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Administrator\\PycharmProjects\\UI_automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 241, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)\n"}, "start": 1602225691164, "stop": 1602225691241}, {"name": "添加失败截图...", "status": "passed", "attachments": [{"name": "失败截图", "source": "8f77b05d-84e4-40d6-9bae-758512263f93-attachment.png", "type": "image/png"}], "start": 1602225691631, "stop": 1602225692140}], "attachments": [{"name": "log", "source": "78e5e69e-770c-4cbd-a936-0220d6baaa65-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "dd9589a6-ef7a-440a-b62b-e8d3f542f301-attachment.txt", "type": "text/plain"}], "start": 1602225667264, "stop": 1602225691243, "uuid": "254482b1-46e5-4e04-8eb9-441e050974b5", "historyId": "b42a0ee6ae1d321b775ac9fad4224700", "testCaseId": "1cc5fe791e335b82ef98dfbca9b99669", "fullName": "test_case.test_import.Test_import#test_import", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_import"}, {"name": "subSuite", "value": "Test_import"}, {"name": "host", "value": "TX5C3S1L7D31UYD"}, {"name": "thread", "value": "15204-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_import"}]}