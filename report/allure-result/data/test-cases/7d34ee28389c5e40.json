{
  "uid" : "7d34ee28389c5e40",
  "name" : "test_add_course",
  "fullName" : "test_case.test_teach.Test_teachstu#test_add_course",
  "historyId" : "78f29684fb09abeb8e6fd4cb67461a2e",
  "time" : {
    "start" : 1602467329479,
    "stop" : 1602467335515,
    "duration" : 6036
  },
  "description" : "添加课程，后取消排课",
  "descriptionHtml" : "<p>添加课程，后取消排课</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <UI_automation.test_case.test_teach.Test_teachstu object at 0x017521B0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"45369f8a9bb190e18f6813b4a8633f3d\")>\nlog_up = <commen.log.Log object at 0x05046190>\n\n    @allure.description('添加课程，后取消排课')\n    def test_add_course(self, browser, log_up):        #登录后点击添加学员按钮\n        try:\n            log_up.info('测试用例：添加课程')\n            loginsuccess(browser)\n            teacher = Teach_page(browser)  # 实例化登录后的页面对象（mainpage）\n>           teacher.addcourse()\n\ntest_case\\test_teach.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\teach_page.py:12: in addcourse\n    self.waitelement('class_name', 3, 'contentTd')\ncommen\\base.py:407: in waitelement\n    WebDriverWait(self.driver, waittime).until(lambda x: x.find_element_by_class_name(value))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"45369f8a9bb190e18f6813b4a8633f3d\")>\nmethod = <function BaseMethod.waitelement.<locals>.<lambda> at 0x00FBA930>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "log_up",
    "time" : {
      "start" : 1602467268477,
      "stop" : 1602467268477,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "teardown_func",
    "time" : {
      "start" : 1602467329477,
      "stop" : 1602467329477,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "browser",
    "time" : {
      "start" : 1602467259901,
      "stop" : 1602467268477,
      "duration" : 8576
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "添加课程，后取消排课",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <UI_automation.test_case.test_teach.Test_teachstu object at 0x017521B0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"45369f8a9bb190e18f6813b4a8633f3d\")>\nlog_up = <commen.log.Log object at 0x05046190>\n\n    @allure.description('添加课程，后取消排课')\n    def test_add_course(self, browser, log_up):        #登录后点击添加学员按钮\n        try:\n            log_up.info('测试用例：添加课程')\n            loginsuccess(browser)\n            teacher = Teach_page(browser)  # 实例化登录后的页面对象（mainpage）\n>           teacher.addcourse()\n\ntest_case\\test_teach.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\teach_page.py:12: in addcourse\n    self.waitelement('class_name', 3, 'contentTd')\ncommen\\base.py:407: in waitelement\n    WebDriverWait(self.driver, waittime).until(lambda x: x.find_element_by_class_name(value))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"45369f8a9bb190e18f6813b4a8633f3d\")>\nmethod = <function BaseMethod.waitelement.<locals>.<lambda> at 0x00FBA930>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ {
      "name" : "添加失败截图...",
      "time" : {
        "start" : 1602467335579,
        "stop" : 1602467335952,
        "duration" : 373
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d2b273a2b84e4587",
        "name" : "失败截图",
        "source" : "d2b273a2b84e4587.png",
        "type" : "image/png",
        "size" : 152602
      } ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "1cee96def687c061",
      "name" : "log",
      "source" : "1cee96def687c061.txt",
      "type" : "text/plain",
      "size" : 14540
    }, {
      "uid" : "254cb25027836066",
      "name" : "stdout",
      "source" : "254cb25027836066.txt",
      "type" : "text/plain",
      "size" : 32
    }, {
      "uid" : "eaa61c12e4263bd2",
      "name" : "stderr",
      "source" : "eaa61c12e4263bd2.txt",
      "type" : "text/plain",
      "size" : 364
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 4,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "teardown_func::0",
    "time" : {
      "start" : 1602467335955,
      "stop" : 1602467336030,
      "duration" : 75
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "browser::0",
    "time" : {
      "start" : 1602467336032,
      "stop" : 1602467338249,
      "duration" : 2217
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_teach"
  }, {
    "name" : "subSuite",
    "value" : "Test_teachstu"
  }, {
    "name" : "host",
    "value" : "TX5C3S1L7D31UYD"
  }, {
    "name" : "thread",
    "value" : "14796-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_teach"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "7d34ee28389c5e40.json",
  "parameterValues" : [ ]
}